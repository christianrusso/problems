Dado un tablero similar al de ajedrez de tamaño N*M (N filas y M columnas) donde cada casillero pueda ser accedido usando un par de enteros (P, Q) donde 0 ≤ P < N y 0 ≤ Q < M.

En cada casillero hay una cantidad de granos de arroz. Un peón es ubicado inicialmente en el casillero (0, 0). Puede realizar dos tipos de movimiento:
moverse desde el casillero (P, Q) al (P+1, Q), o
moverse desde el casillero (P, Q) al (P, Q+1).

Despues de N + M − 2 movimientos el peon llegara al casillero (N−1, M−1). Durante su viaje a través del tablero recolecta los granos de arroz de los casilleros por donde pasa.

Escribir una funcion:

int solution(int **A, int N, int M);

que, dada una matriz de N*M  representando la cantidad de granos de arroz en cada casillero de un tablero de N*M, devuelva el máximo número de granos de arroz que el peón pueda recolectar mientras se mueve desde el casillero (0, 0) al (N−1, M−1) de la manera descrita anteriormente

Por ejemplo, dada la siguiente matriz A:
 A[0][0] = 2    A[0][1] = 2    A[0][2] = 4    A[0][3] = 2
  A[1][0] = 0    A[1][1] = 3    A[1][2] = 0    A[1][3] = 1
  A[2][0] = 1    A[2][1] = 2    A[2][2] = 2    A[2][3] = 1
  A[3][0] = 4    A[3][1] = 1    A[3][2] = 2    A[3][3] = 2

la funcion debe devolver 15. Los casilleros en negrita indican uno de los caminos que el peón puede seguir. Siguiendo este camino, el peón recolectara A[0][0] + A[0][1] + A[1][1] + A[2][1] + A[2][2] + A[3][2] + A[3][3] = 2 + 2 + 3 + 2 + 2 + 2 + 2 = 15 granos de arroz. No hay camino que permita más de 15 granos de arroz.

Asumir que:
N y M son enteros del rango [1..1,000];
cada elemento de la matriz A es un entero del rango [0..200].

Complejidad:
Complejidad de peor caso esperada O(N*M);
Complejidad espacial esperada O(N+M).